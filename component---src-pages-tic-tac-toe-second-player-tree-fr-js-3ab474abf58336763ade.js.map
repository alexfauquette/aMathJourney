{"version":3,"sources":["webpack:///./src/components/tic-tac-toe/atoms/Board/Board.view.js","webpack:///./src/components/tic-tac-toe/atoms/Board/index.js","webpack:///./src/components/tic-tac-toe/atoms/Link/Link.view.js","webpack:///./src/components/tic-tac-toe/atoms/Link/index.js","webpack:///./src/components/tic-tac-toe/explanations/utils/game.js","webpack:///./src/components/tic-tac-toe/explanations/completTree/index.js","webpack:///./src/components/tic-tac-toe/translation.js","webpack:///./src/components/tic-tac-toe/explanations/utils/index.js","webpack:///./src/pages/tic-tac-toe/second-player-tree/fr.js"],"names":["Board","width","height","state","winner","solution","transform","localAction","globalAction","victory","addedIndex","className","classes","board","pointerClickable","onClick","undefined","x","y","toLowerCase","winnerX","winnerO","winnerUnKnoned","winnerNull","winnerSelected","elements","split","map","player","index","Math","floor","key","X","justAdded","x1","y1","x2","y2","O","r","min","cx","cy","solutionX","solutionO","solutionUnKnoned","solutionNull","solutionSelected","empty","clickable","grid","length","col","line","winningLine","Link","x0","y0","style","stroke","strokeWidth","fill","d","Game","PLAYERS","NULL","EMPTY","UNKNOW","actions","output","push","getPlayerID","stateOrPlayer","step","i","this","indexOf","getPlayer","getAdversary","play","action","substring","isFull","isFinished","getWinner","getVictory","game","CompletTree","props","treeRobot","feelSolutions","robot","optTreeRobot","reduceToOpimalTree","tree","initialTree","timeToWin","heightLimited","toogleChildrens","id","setState","retracted","reset","toogleHeightLimited","render","translation","translate","lang","treePositions","treeToPosition","reduce","t","max","viewBox","Fragment","parseInt","charAt","parent","SIZE","React","Component","fr","first_player","second_player","show_solution","next","extend","retract","case0","case1","case2","case3","case5","case6","case4","intro","possibleActions","winningIntro","winning","winnings","nullIntro","null","nulls","loosing","has","are","is","en","curentPlayer","minTimeToWin","posibilities","adversary","ends","final","newState","result","includes","filter","total","currentIndexList","currentActionsList","join","currentState","goingBack","parent_position","childrenActions","slice","pop","treeToFeel","bestAction","newGrid","minimalTimeToWin","forEach","completTree","perfectPlayer","solutions","score","random","Page","location","currentLanguage","title","to"],"mappings":"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","file":"component---src-pages-tic-tac-toe-second-player-tree-fr-js-3ab474abf58336763ade.js","sourcesContent":["import React from \"react\"\nimport classes from \"./Board.module.scss\"\n\nconst Board = ({\n  width,\n  height,\n  state,\n  winner,\n  solution,\n  transform,\n  localAction,\n  globalAction,\n  victory,\n  addedIndex,\n}) => (\n  <g\n    className={`${classes.board} ${classes.winner} ${\n      globalAction ? classes.pointerClickable : \"\"\n    }`}\n    transform={transform}\n    onClick={globalAction ? globalAction() : undefined}\n  >\n    <rect\n      x={0}\n      y={0}\n      width={width}\n      height={height}\n      className={`${\n        winner\n          ? winner.toLowerCase() === \"x\"\n            ? classes.winnerX\n            : winner.toLowerCase() === \"o\"\n            ? classes.winnerO\n            : winner.toLowerCase() === \".\"\n            ? classes.winnerUnKnoned\n            : winner.toLowerCase() === \"n\"\n            ? classes.winnerNull\n            : winner.toLowerCase() === \"n\"\n            ? classes.winnerSelected\n            : \"\"\n          : \"\"\n      }`}\n\n      // onClick={globalAction && globalAction()}\n    />\n    <g className={classes.elements}>\n      {state.split(\"\").map((player, index) => {\n        let x = width / 6 + (Math.floor(index % 3) * width) / 3\n        let y = height / 6 + (Math.floor(index / 3) * height) / 3\n\n        switch (player) {\n          case \"X\":\n            return (\n              <g\n                key={index}\n                className={`${classes.X} ${\n                  addedIndex === index ? classes.justAdded : \"\"\n                }`}\n              >\n                <line\n                  x1={x - (width * 0.4) / 3}\n                  y1={y - (height * 0.4) / 3}\n                  x2={x + (width * 0.4) / 3}\n                  y2={y + (height * 0.4) / 3}\n                />\n                <line\n                  x1={x + (width * 0.4) / 3}\n                  y1={y - (height * 0.4) / 3}\n                  x2={x - (width * 0.4) / 3}\n                  y2={y + (height * 0.4) / 3}\n                />\n              </g>\n            )\n          case \"O\":\n            return (\n              <g\n                key={index}\n                className={`${classes.O} ${\n                  addedIndex === index ? classes.justAdded : \"\"\n                }`}\n              >\n                <circle r={(Math.min(width, height) * 0.4) / 3} cx={x} cy={y} />\n              </g>\n            )\n\n          default:\n            return (\n              <rect\n                key={index}\n                x={x - (width * 0.4) / 3}\n                y={y - (height * 0.4) / 3}\n                width={(width * 0.8) / 3}\n                height={(height * 0.8) / 3}\n                className={`${solution &&\n                  (solution[index] === \"x\"\n                    ? classes.solutionX\n                    : solution[index] === \"o\"\n                    ? classes.solutionO\n                    : solution[index] === \".\"\n                    ? classes.solutionUnKnoned\n                    : solution[index] === \"n\"\n                    ? classes.solutionNull\n                    : solution[index] === \"n\"\n                    ? classes.solutionSelected\n                    : classes.empty)} ${\n                  !solution && localAction ? classes.clickable : \"\"\n                } `}\n                onClick={localAction ? localAction(index) : undefined}\n              />\n            )\n        }\n      })}\n    </g>\n    <g className={classes.grid}>\n      <line x1={(width * 1) / 3} y1=\"0\" x2={(width * 1) / 3} y2={height} />\n      <line x1={(width * 2) / 3} y1=\"0\" x2={(width * 2) / 3} y2={height} />\n\n      <line x1=\"0\" y1={(height * 1) / 3} x2={width} y2={(height * 1) / 3} />\n      <line x1=\"0\" y1={(height * 2) / 3} x2={width} y2={(height * 2) / 3} />\n    </g>\n    {victory && victory.length === 2 && (\n      <line\n        x1={width / 6 + (width * victory[1].col) / 3}\n        y1={height / 6 + (height * victory[1].line) / 3}\n        x2={width / 6 + (width * victory[0].col) / 3}\n        y2={height / 6 + (height * victory[0].line) / 3}\n        className={classes.winningLine}\n      />\n    )}\n  </g>\n)\n\nexport default Board\n","import Board from'./Board.view'\n\nexport default Board","import React from \"react\"\n\nconst Link = ({ x0, y0, x1, y1 }) => (\n  <path\n    style={{\n      stroke: \"var(--gray-700)\",\n      strokeWidth: 3,\n      fill: \"none\",\n    }}\n    d={`M${x0} ${y0} H${(x1 + x0) / 2} V${y1} H${x1}`}\n  />\n)\n\nexport default Link\n","import Link from'./Link.view'\n\nexport default Link","export default class Game {\n  PLAYERS = [\"X\", \"O\"];\n  NULL = \"n\";\n  EMPTY = \".\";\n  UNKNOW = \"?\";\n\n  actions(state) {\n    let output = [];\n    for (let index = 0; index < 9; index++) {\n      if (state[index] === \".\") {\n        output.push(index);\n      }\n    }\n    return output;\n  }\n\n  getPlayerID(stateOrPlayer) {\n    if (stateOrPlayer.length === 9) {\n      let step = 0;\n      for (let i = 0; i < 9; i++) {\n        if (stateOrPlayer[i] !== \".\") {\n          step++;\n        }\n      }\n      return step % 2;\n    }\n    else if(stateOrPlayer.length === 1){\n        return this.PLAYERS.indexOf(stateOrPlayer);\n    }\n    else{\n        return null;\n    }\n  }\n\n  getPlayer(state) {\n    return this.PLAYERS[this.getPlayerID(state)];\n  }\n\n  getAdversary(player) {\n    if (player === this.PLAYERS[0]) {\n      return this.PLAYERS[1];\n    }\n    if (player === this.PLAYERS[1]) {\n      return this.PLAYERS[0];\n    }\n  }\n\n\n  play(state, action) {\n    let player = this.getPlayer(state);\n    let newState =\n      state.substring(0, action) + player + state.substring(action + 1);\n    return newState;\n  }\n\n  isFull(state) {\n    for (let i = 0; i < 9; i++) {\n      if (state[i] === \".\") {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  isFinished(state) {\n    for (let i = 0; i < 3; i++) {\n      if (\n        state[3 * i] === state[3 * i + 1] &&\n        state[3 * i + 1] === state[3 * i + 2] &&\n        state[3 * i] !== this.EMPTY\n      ) {\n        return true;\n      }\n      if (\n        state[i] === state[3 + i] &&\n        state[3 + i] === state[6 + i] &&\n        state[i] !== this.EMPTY\n      ) {\n        return true;\n      }\n    }\n    if (\n      state[0] === state[4] &&\n      state[4] === state[8] &&\n      state[0] !== this.EMPTY\n    ) {\n      return true;\n    }\n    if (\n      state[2] === state[4] &&\n      state[4] === state[6] &&\n      state[2] !== this.EMPTY\n    ) {\n      return true;\n    }\n    return this.isFull(state);\n  }\n\n  getWinner(state) {\n    for (let i = 0; i < 3; i++) {\n      if (\n        state[3 * i] === state[3 * i + 1] &&\n        state[3 * i + 1] === state[3 * i + 2] &&\n        state[3 * i] !== this.EMPTY\n      ) {\n        return state[3 * i];\n      }\n      if (\n        state[i] === state[3 + i] &&\n        state[3 + i] === state[6 + i] &&\n        state[i] !== this.EMPTY\n      ) {\n        return state[i];\n      }\n    }\n    if (\n      state[0] === state[4] &&\n      state[4] === state[8] &&\n      state[0] !== this.EMPTY\n    ) {\n      return state[0];\n    }\n    if (\n      state[2] === state[4] &&\n      state[4] === state[6] &&\n      state[2] !== this.EMPTY\n    ) {\n      return state[2];\n    }\n    if (this.isFull(state)) {\n      return this.NULL;\n    }\n    return this.UNKNOW;\n  }\n\n  getVictory(state) {\n    for (let i = 0; i < 3; i++) {\n      if (\n        state[3 * i] === state[3 * i + 1] &&\n        state[3 * i + 1] === state[3 * i + 2] &&\n        state[3 * i] !== this.EMPTY\n      ) {\n        return [{col: 0, line:i},{col: 2, line:i}];\n      }\n      if (\n        state[i] === state[3 + i] &&\n        state[3 + i] === state[6 + i] &&\n        state[i] !== this.EMPTY\n      ) {\n        return [{col: i, line:0},{col: i, line:2}];\n      }\n    }\n    if (\n      state[0] === state[4] &&\n      state[4] === state[8] &&\n      state[0] !== this.EMPTY\n    ) {\n      return [{col: 0, line:0},{col: 2, line:2}];\n    }\n    if (\n      state[2] === state[4] &&\n      state[4] === state[6] &&\n      state[2] !== this.EMPTY\n    ) {\n      return [{col: 2, line:0},{col: 0, line:2}];\n    }\n    return [];\n  }\n}\n","import React from \"react\"\nimport Board from \"src/components/tic-tac-toe/atoms/Board\"\nimport Game from \"src/components/tic-tac-toe/explanations/utils/game\"\nimport Link from \"src/components/tic-tac-toe/atoms/Link\"\nimport {\n  treeToPosition,\n  feelSolutions,\n  reduceToOpimalTree,\n} from \"src/components/tic-tac-toe/explanations/utils\"\nimport translate from \"../../translation\"\n\nconst game = new Game()\n\nclass CompletTree extends React.Component {\n  constructor(props) {\n    super(props)\n\n    let treeRobot = {}\n\n    feelSolutions(treeRobot, \".........\", 0, props.robot)\n\n    let optTreeRobot = {}\n    reduceToOpimalTree(treeRobot, optTreeRobot, \"\", \".........\", 0, props.robot)\n    this.state = {\n      robot: props.robot,\n      tree: optTreeRobot,\n      initialTree: optTreeRobot,\n      height: optTreeRobot[\"\"].timeToWin,\n      heightLimited: true,\n    }\n  }\n\n  toogleChildrens(id) {\n    return () => () => {\n      this.setState({\n        tree: {\n          ...this.state.tree,\n          [id]: {\n            ...this.state.tree[id],\n            retracted: !this.state.tree[id].retracted,\n          },\n        },\n      })\n    }\n  }\n\n  reset() {\n    return () => {\n      this.setState({\n        ...this.state,\n        tree: this.state.initialTree,\n      })\n    }\n  }\n  toogleHeightLimited() {\n    return () => {\n      this.setState({\n        ...this.state,\n        heightLimited: !this.state.heightLimited,\n      })\n    }\n  }\n\n  render() {\n    const translation = translate[this.props.lang || \"en\"]\n    const SIZE = 75\n    const treePositions = treeToPosition(this.state.tree)\n    const height = treePositions.reduce((t, x) => Math.max(t, x.y), 0)\n    return (\n      <>\n        <div\n          className={this.state.heightLimited ? \"limit-height\" : \"free-height\"}\n        >\n          <svg\n            viewBox={`0 0 1000 ${100 * (height + 1)}`}\n            style={{ width: \"100%\" }}\n          >\n            {treePositions.map(state => (\n              <React.Fragment key={state.id}>\n                <Board\n                  width={SIZE}\n                  height={SIZE}\n                  state={state.grid}\n                  transform={`translate(${12 + state.x * 100},${12 +\n                    state.y * 100})`}\n                  globalAction={this.toogleChildrens(state.id)}\n                  winner={state.winner}\n                  victory={game.getVictory(state.grid)}\n                  addedIndex={\n                    state.id && parseInt(state.id.charAt(state.id.length - 1))\n                  }\n                />\n                {state.parent && (\n                  <Link\n                    x0={14 + state.parent[0] * 100 + SIZE}\n                    y0={12 + state.parent[1] * 100 + SIZE / 2}\n                    x1={10 + state.x * 100}\n                    y1={12 + state.y * 100 + SIZE / 2}\n                  />\n                )}\n              </React.Fragment>\n            ))}\n          </svg>\n        </div>\n        {100 * (height + 1) > 500 && (\n          <button\n            onClick={this.toogleHeightLimited()}\n            className=\"treeExtension\"\n          >\n            {this.state.heightLimited ? \"Extend\" : \"Retract\"}\n          </button>\n        )}\n        <button onClick={this.reset()}>{translation[\"reset\"]}</button>\n      </>\n    )\n  }\n}\nexport default CompletTree\n","export default {\n  fr: {\n    reset: \"Réinitialiser\",\n    first_player: \"Premier Joueur\",\n    second_player: \"Second Joueur\",\n    show_solution: \"Afficher la solution pour\",\n    next: \"Suivant\",\n    extend: \"Etendre\",\n    retract: \"Retracter\",\n    case0: \"Regardons qui sont les enfants de cette grille\",\n    case1: \"Commençons par le premier enfant\",\n    case2: \"On connaît l'état de cet enfant. Passons au suivant.\",\n    case3:\n      \"Tous les enfants ont été traité, on peut en déduire qui va gagner avec leur parent\",\n    case5: \"Il y a encore un enfant inconnu, allons voir son résultat\",\n    case6: \"Vous avez testé toutes les possibilités\",\n    case4: {\n      intro: \"Pour cette grille le joueur \",\n      possibleActions: \"actions possibles.\",\n      winningIntro: \"Pour cette action, il y \",\n      winning: \"position gagnante\",\n      winnings: \"positions gagnantes\",\n      nullIntro: \"Parmi ces actions, il n'y a pas de gagnant, mais \",\n      null: \"position nulle\",\n      nulls: \"positions nulles\",\n      loosing: \"In those actions, there is only losing losing one\",\n    },\n    has: \"a\",\n    are: \"sont\",\n    is: \"est\",\n  },\n  en: {\n    reset: \"Reset\",\n    first_player: \"First Player\",\n    second_player: \"Second Player\",\n    show_solution: \"Show solution for\",\n    next: \"Next\",\n    extend: \"Extend\",\n    retract: \"Retract\",\n    case0: \"Let see who are the child of this element\",\n    case1: \"Let start by studying its first child\",\n    case2: \"We know the result for this child, lets continue\",\n    case3:\n      \"All children are computed, we can get the winner of the current grid\",\n    case5: \"There is a unknown child, let's comput its result\",\n    case6: \"You tested all the possibilities\",\n    case4: {\n      intro: \"For this grid, the player \",\n      possibleActions: \"possible actions.\",\n      winningIntro: \"In those actions, there\",\n      winning: \"wininning position\",\n      winnings: \"wininning positions\",\n      nullIntro: \"In those actions, there is no winning one but\",\n      null: \"null position\",\n      nulls: \"null positions\",\n      loosing: \"In those actions, there is only losing losing one\",\n    },\n    has: \"has\",\n    are: \"are\",\n    is: \"is\",\n  },\n}\n","import Game from \"./game\"\n\nconst game = new Game()\n\n// function getTree(state) {\n//   //return a tree which conatins all possibilities\n//   if (game.isFinished(state)) {\n//     return { state: state, winner: game.getWinner(state) };\n//   } else {\n//     let PossibleActions = game.actions(state);\n//     let output = { state: state };\n//     let player = game.getPlayer(state);\n//     let nulIsPossible = false;\n//     let playerWin = false;\n//     for (\n//       let actionIndex = 0;\n//       actionIndex < PossibleActions.length;\n//       actionIndex++\n//     ) {\n//       let action = PossibleActions[actionIndex];\n//       let subTree = getTree(game.play(state, action));\n//       output[action] = subTree;\n//       if (player === subTree[\"winner\"]) {\n//         playerWin = true;\n//       }\n//       if (subTree[\"winner\"] === game.NULL) {\n//         nulIsPossible = true;\n//       }\n//     }\n//     if (playerWin) {\n//       output[\"winner\"] = player;\n//     } else {\n//       if (nulIsPossible) {\n//         output[\"winner\"] = game.NULL;\n//       } else {\n//         output[\"winner\"] = game.getAdversary(player);\n//       }\n//     }\n//     return output;\n//   }\n// }\n\n// function getTreeEco(state) {\n//   //return a tree which stop after findin an winnig acction for the cureent player\n//   if (game.isFinished(state)) {\n//     return { state: state, winner: game.getWinner(state) };\n//   } else {\n//     let PossibleActions = game.actions(state);\n//     let output = { state: state };\n//     let player = game.getPlayer(state);\n//     let nulIsPossible = false;\n//     let playerWin = false;\n//     for (\n//       let actionIndex = 0;\n//       actionIndex < PossibleActions.length;\n//       actionIndex++\n//     ) {\n//       let action = PossibleActions[actionIndex];\n//       let subTree = getTree(game.play(state, action));\n//       output[action] = subTree;\n//       if (player === subTree[\"winner\"]) {\n//         playerWin = true;\n//         output[\"winner\"] = player;\n//         return output;\n//       }\n//       if (subTree[\"winner\"] === game.NULL) {\n//         nulIsPossible = true;\n//       }\n//     }\n//     if (playerWin) {\n//       output[\"winner\"] = player;\n//     } else {\n//       if (nulIsPossible) {\n//         output[\"winner\"] = game.NULL;\n//       } else {\n//         output[\"winner\"] = game.getAdversary(player);\n//       }\n//     }\n//     return output;\n//   }\n// }\n\nfunction feelSolutions(solution, state, curentPlayer, robot) {\n  // feel the object solution with\n  // entry: a grid\n  // output: the winer, how win after each action, and the number of leaf needed for the computation\n  let winner\n  let posibilities = []\n  let player = game.PLAYERS[curentPlayer]\n  let adversary = game.PLAYERS[(1 + curentPlayer) % 2]\n\n  if (solution[state] === undefined) {\n    solution[state] = {\n      ends: state,\n      curentPlayer: curentPlayer,\n      winner: \"\",\n      timeToWin: null,\n    }\n  }\n\n  if (game.getWinner(state) !== game.UNKNOW) {\n    winner = game.getWinner(state).toLowerCase()\n    solution[state].winner = winner\n    solution[state].timeToWin = 1\n    solution[state].final = true\n    return { winner: winner, timeToWin: 1 }\n  }\n\n  for (let action = 0; action < 9; action++) {\n    if (solution[state].ends[action] === game.EMPTY) {\n      //We don't know the issue of this action\n      let newState =\n        state.substring(0, action) + player + state.substring(action + 1)\n\n      let winner\n      let timeToWin\n      let result\n      if (\n        solution[newState] !== undefined &&\n        solution[newState].winner !== \"\"\n      ) {\n        //we already now the solution\n        winner = solution[newState].winner\n        timeToWin = solution[newState].timeToWin\n      } else {\n        result = feelSolutions(\n          solution,\n          newState,\n          (curentPlayer + 1) % 2,\n          robot\n        )\n        winner = result.winner\n        timeToWin = result.timeToWin\n      }\n\n      //We know who will win if current player play this action\n      solution[state].ends =\n        solution[state].ends.substring(0, action) +\n        winner +\n        solution[state].ends.substring(action + 1)\n\n      posibilities.push({ winner, timeToWin })\n    }\n  }\n\n  let minTimeToWin\n  if (posibilities.map(x => x.winner).includes(player.toLowerCase())) {\n    minTimeToWin = Math.min(\n      ...posibilities\n        .map(x => (x.winner === player.toLowerCase() ? x.timeToWin : null))\n        .filter(x => x !== null)\n    )\n    winner = player.toLowerCase()\n  } else {\n    if (posibilities.map(x => x.winner).includes(game.NULL)) {\n      minTimeToWin = Math.min(\n        ...posibilities\n          .map(x => (x.winner === game.NULL ? x.timeToWin : null))\n          .filter(x => x !== null)\n      )\n      winner = game.NULL\n    } else {\n      if (posibilities.map(x => x.winner).includes(adversary.toLowerCase())) {\n        minTimeToWin = Math.min(\n          ...posibilities\n            .map(x =>\n              x.winner === adversary.toLowerCase() ? x.timeToWin : null\n            )\n            .filter(x => x !== null)\n        )\n        winner = adversary.toLowerCase()\n      }\n    }\n  }\n\n  solution[state].winner = winner\n  if (curentPlayer === robot) {\n    solution[state].timeToWin = minTimeToWin\n  } else {\n    solution[state].timeToWin = posibilities\n      .map(x => x.timeToWin)\n      .reduce((total, x) => total + x)\n  }\n  return {\n    winner: solution[state].winner,\n    timeToWin: solution[state].timeToWin,\n  }\n}\n\n// function opimalTree(tree, state, curentPlayer, robot, origineX, origineY) {\n//   //return the minimal tree (in size) that prove robot will obtain at least a null match\n//   if (tree[state].final) {\n//     return [{ state, X: origineX, Y: origineY, winner: tree[state].winner }];\n//   }\n//   let player = game.PLAYERS[curentPlayer];\n\n//   if (curentPlayer === robot) {\n//     for (let action = 0; action < 9; action++) {\n//       if (state[action] === \".\") {\n//         let newState =\n//           state.substring(0, action) + player + state.substring(action + 1);\n//         if (\n//           tree[state].timeToWin === tree[newState].timeToWin &&\n//           tree[state].winner === tree[newState].winner\n//         ) {\n//           return [\n//             { state, X: origineX, Y: origineY, winner: tree[state].winner },\n//             ...opimalTree(\n//               tree,\n//               newState,\n//               (curentPlayer + 1) % 2,\n//               robot,\n//               origineX + 1,\n//               origineY\n//             )\n//           ];\n//         }\n//       }\n//     }\n//   } else {\n//     let output = [\n//       { state, X: origineX, Y: origineY, winner: tree[state].winner }\n//     ];\n//     for (let action = 0; action < 9; action++) {\n//       if (state[action] === \".\") {\n//         let newState =\n//           state.substring(0, action) + player + state.substring(action + 1);\n//         let subTree = opimalTree(\n//           tree,\n//           newState,\n//           (curentPlayer + 1) % 2,\n//           robot,\n//           origineX + 1,\n//           origineY\n//         );\n//         output = [...output, ...subTree];\n//         origineY = subTree[subTree.length - 1].Y + 1;\n//       }\n//     }\n//     return output;\n//   }\n// }\n\nfunction treeToPosition(tree) {\n  let height = 0\n  let currentIndexList = []\n  let currentActionsList = []\n  let id = currentActionsList.join(\"\")\n  let currentState = tree[id]\n  let goingBack = false\n\n  let output = []\n  output.push({\n    ...currentState,\n    x: currentActionsList.length,\n    y: height,\n    id: id,\n  })\n\n  let parent_position = [[0, 0]]\n  if (currentState.childrenActions.length > 0) {\n    currentIndexList.push(0)\n    currentActionsList.push(currentState.childrenActions[0])\n    currentState = tree[currentActionsList.join(\"\")]\n  }\n\n  while (currentIndexList.length > 0) {\n    currentActionsList = []\n    for (let i = 0; i < currentIndexList.length; i++) {\n      currentActionsList.push(\n        tree[currentActionsList.join(\"\")].childrenActions[currentIndexList[i]]\n      )\n    }\n    let id = currentActionsList.join(\"\")\n    currentState = tree[id]\n\n    if (!goingBack) {\n      //en mode forward on affiche les noeuds\n      output.push({\n        ...currentState,\n        x: currentActionsList.length,\n        y: height,\n        id: id,\n        parent: parent_position[parent_position.length - 1],\n      })\n      parent_position.push([currentActionsList.length, height])\n\n      if (currentState.childrenActions.length > 0) {\n        //si il y a des fils, on y va\n        currentIndexList.push(0)\n      } else {\n        //si non, on verifie la presence de voisins\n        currentState = tree[currentActionsList.slice(0, -1).join(\"\")]\n        parent_position.pop()\n\n        currentIndexList[currentIndexList.length - 1] =\n          currentIndexList[currentIndexList.length - 1] + 1\n      }\n    } else {\n      //en mode back, on considere\n      currentState = tree[currentActionsList.slice(0, -1).join(\"\")]\n\n      parent_position.pop()\n\n      currentIndexList[currentIndexList.length - 1] =\n        currentIndexList[currentIndexList.length - 1] + 1\n    }\n\n    if (\n      currentIndexList[currentIndexList.length - 1] >=\n        currentState.childrenActions.length ||\n      currentState.retracted\n    ) {\n      //si il n'y a plus d'enfant ou qu'on nous demande de ne pas les traiter\n      currentIndexList.pop()\n      goingBack = true\n    } else {\n      if (currentIndexList[currentIndexList.length - 1] !== 0) {\n        height += 1\n      }\n      goingBack = false\n    }\n  }\n  return output\n}\n\nfunction reduceToOpimalTree(tree, treeToFeel, id, grid, curentPlayer, robot) {\n  //return the minimal tree (in size) that prove robot will obtain at least a null match\n  if (game.isFinished(grid)) {\n    treeToFeel[id] = {\n      grid: grid,\n      ends: grid,\n      childrenActions: [],\n      timeToWin: tree[grid].timeToWin,\n      winner: tree[grid].winner,\n    }\n  } else {\n    const actions = game.actions(grid)\n\n    if (curentPlayer === robot) {\n      let bestAction\n      let newGrid\n      let minimalTimeToWin = 1000000\n\n      actions.forEach(action => {\n        newGrid = game.play(grid, action)\n        if (\n          tree[newGrid].timeToWin < minimalTimeToWin &&\n          tree[newGrid].winner === tree[grid].winner\n        ) {\n          minimalTimeToWin = tree[newGrid].timeToWin\n          bestAction = action\n        }\n      })\n      treeToFeel[id] = {\n        grid: grid,\n        ends: tree[grid].ends,\n        childrenActions: [bestAction],\n        timeToWin: tree[grid].timeToWin,\n        winner: tree[grid].winner,\n      }\n      reduceToOpimalTree(\n        tree,\n        treeToFeel,\n        id + bestAction,\n        game.play(grid, bestAction),\n        (curentPlayer + 1) % 2,\n        robot\n      )\n    } else {\n      treeToFeel[id] = {\n        grid: grid,\n        ends: tree[grid].ends,\n        childrenActions: actions,\n        timeToWin: tree[grid].timeToWin,\n        winner: tree[grid].winner,\n      }\n      actions.forEach(action => {\n        reduceToOpimalTree(\n          tree,\n          treeToFeel,\n          id + action,\n          game.play(grid, action),\n          (curentPlayer + 1) % 2,\n          robot\n        )\n      })\n    }\n  }\n}\n\nlet completTree = {}\nfeelSolutions(completTree, \".........\", 0, 2)\n\nfunction perfectPlayer(state) {\n  let solutions = completTree[state].ends\n  let victory = completTree[state].winner\n  let player = game.getPlayer(state)\n\n  let actions = []\n  if (victory === player.toLowerCase()) {\n    let nextGrid\n    let score\n    let bestScore = 0\n    for (let i = 0; i < 9; i++) {\n      if (solutions[i] === victory) {\n        nextGrid = completTree[game.play(state, i)].ends\n        score = nextGrid.split(\"\").filter(x => x === player.toLowerCase())\n          .length\n        if (score > bestScore) {\n          actions = [i]\n        } else if (score === bestScore) {\n          actions.push(i)\n        }\n      }\n    }\n  } else if (victory === game.NULL) {\n    for (let i = 0; i < 9; i++) {\n      if (solutions[i] === game.NULL) {\n        actions.push(i)\n      }\n    }\n  } else {\n    for (let i = 0; i < 9; i++) {\n      if (state[i] === game.EMPTY) {\n        actions.push(i)\n      }\n    }\n  }\n\n  let action = actions[Math.floor(actions.length * Math.random())]\n  return action\n}\n\nexport {\n  completTree,\n  perfectPlayer,\n  treeToPosition,\n  feelSolutions,\n  reduceToOpimalTree,\n}\n","import React from \"react\"\n\nimport Layout from \"src/components/layout\"\nimport { Link } from \"gatsby\"\nimport SEO from \"src/components/seo\"\n\n//components\nimport CompletTree from \"src/components/tic-tac-toe/explanations/completTree\"\n\n//images\n// import algoPicture from \"src/components/tic-tac-toe/explanations/completTree\"\n\nconst Page = () => (\n  <Layout location=\"/tic-tac-toe/second-player-tree\" currentLanguage=\"Français\">\n    <SEO title=\"Morpion\" />\n\n    <p>\n      Cette page présente l'arbre des possibilités du premier joueur face à une\n      IA. Le fonctionnement de l'IA, et les clés de lecture de cet arbre se\n      trouvent dans <Link to=\"/tic-tac-toe/fr\">l'article principal</Link>.\n    </p>\n    <noscript>\n      Pour faire fonctionner les animations, merci d'activer votre javscript.\n    </noscript>\n\n    <CompletTree robot={1} lang=\"fr\" />\n  </Layout>\n)\n\nexport default Page\n"],"sourceRoot":""}