{"version":3,"sources":["webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/components/seo.js","webpack:///./src/components/LangSelector/index.js","webpack:///./src/components/Header/index.js","webpack:///./src/components/layout.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/tic-tac-toe/explenations/utils/game.js","webpack:///./src/components/tic-tac-toe/explenations/utils/index.js","webpack:///./src/components/tic-tac-toe/atoms/Board/Board.view.js","webpack:///./src/components/tic-tac-toe/atoms/Board/index.js","webpack:///./src/components/tic-tac-toe/explenations/completTree/index.js","webpack:///./src/components/tic-tac-toe/atoms/Link/Link.view.js","webpack:///./src/components/tic-tac-toe/atoms/Link/index.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","d","__webpack_exports__","a","React","createContext","PropTypes","object","string","isRequired","func","m","module","exports","require","default","SEO","_ref","description","lang","meta","title","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","data","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","createElement","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","propTypes","arrayOf","LangSelector","_ref$currentLanguage","currentLanguage","_ref$languages","languages","file","_ref$location","location","_React$useState","useState","anchorEl","setAnchorEl","react_default","className","classes","root","Button","aria-controls","aria-haspopup","onClick","event","currentTarget","menuTitle","Language_default","Menu","id","keepMounted","open","Boolean","onClose","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","menu","map","language","MenuItem","key","selected","gatsby_browser_entry","link","to","Header","siteTitle","Fran√ßais","English","header","firstLine","style","margin","components_LangSelector","float","subtitle","Layout","children","components_Header","Object","assign","article","Date","getFullYear","href","node","ProdPageRenderer","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","json","shape","Game","PLAYERS","NULL","EMPTY","UNKNOW","actions","state","output","index","push","getPlayerID","stateOrPlayer","length","step","i","this","indexOf","getPlayer","getAdversary","player","play","action","substring","isFull","isFinished","getWinner","getVictory","col","line","game","feelSolutions","solution","curentPlayer","robot","winner","minTimeToWin","posibilities","adversary","undefined","ends","timeToWin","toLowerCase","final","newState","result","x","includes","Math","min","apply","filter","reduce","total","treeToPosition","tree","height","currentIndexList","currentActionsList","join","currentState","goingBack","y","parent_position","childrenActions","slice","pop","parent","retracted","reduceToOpimalTree","treeToFeel","grid","bestAction","newGrid","minimalTimeToWin","forEach","completTree","perfectPlayer","solutions","victory","score","split","floor","random","Board","width","transform","localAction","globalAction","addedIndex","board","pointerClickable","winnerX","winnerO","winnerUnKnoned","winnerNull","winnerSelected","elements","X","justAdded","x1","y1","x2","y2","O","r","cx","cy","solutionX","solutionO","solutionUnKnoned","solutionNull","solutionSelected","empty","clickable","winningLine","CompletTree","props","_this","_React$Component","call","treeRobot","optTreeRobot","initialTree","heightLimited","toogleChildrens","_this2","_Object$assign","setState","reset","_this3","toogleHeightLimited","_this4","render","_this5","treePositions","t","max","react__WEBPACK_IMPORTED_MODULE_2___default","Fragment","viewBox","src_components_tic_tac_toe_atoms_Board__WEBPACK_IMPORTED_MODULE_3__","parseInt","charAt","src_components_tic_tac_toe_atoms_Link__WEBPACK_IMPORTED_MODULE_5__","x0","y0","SIZE","Component","Link","stroke","strokeWidth","fill"],"mappings":"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","file":"2-10194e8ed6aedb443f7f.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n        {\n          name: \"google-site-verification\",\n          content: \"H5I7MCgD6ip6rafQkiIUvhaoQXlvfJoK3H4KHSg7ZZs\",\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\"\nimport Button from \"@material-ui/core/Button\"\nimport Menu from \"@material-ui/core/Menu\"\nimport MenuItem from \"@material-ui/core/MenuItem\"\nimport { Link } from \"gatsby\"\nimport LanguageIcon from \"@material-ui/icons/Language\"\nimport classes from \"./style.module.scss\"\n\nconst LangSelector = ({\n  currentLanguage = \"English\",\n  languages = [\n    { name: \"Fran√ßais\", file: \"fr\" },\n    { name: \"English\", file: \"\" },\n  ],\n  location = \"/\",\n}) => {\n  const [anchorEl, setAnchorEl] = React.useState(null)\n\n  function handleClick(event) {\n    setAnchorEl(event.currentTarget)\n  }\n\n  function handleClose() {\n    setAnchorEl(null)\n  }\n\n  return (\n    <div className={classes.root}>\n      <Button\n        aria-controls=\"simple-menu\"\n        aria-haspopup=\"true\"\n        onClick={handleClick}\n        className={classes.menuTitle}\n      >\n        <LanguageIcon />\n        <span>{currentLanguage}</span>\n      </Button>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n        getContentAnchorEl={null}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"left\",\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"left\",\n        }}\n        className={classes.menu}\n      >\n        {languages.map(language => (\n          <MenuItem\n            key={language.file}\n            selected={currentLanguage === language.name}\n          >\n            {/* <p>{`${location}/${language.file}`}</p> */}\n            <Link className={classes.link} to={`${location}/${language.file}`}>\n              {language.name}\n            </Link>\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  )\n}\n\nexport default LangSelector\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\nimport LangSelector from \"../LangSelector\"\nimport classes from \"./style.module.scss\"\n\nconst Header = ({\n  siteTitle,\n  currentLanguage = \"English\",\n  location,\n  languages = { Fran√ßais: \"fr\", English: \"\" },\n}) => (\n  <header className={classes.header}>\n    <div className={classes.firstLine}>\n      <Link to={`/${languages[currentLanguage]}`} className={classes.title}>\n        <h1 style={{ margin: 0 }}>{siteTitle}</h1>\n      </Link>\n      <LangSelector\n        currentLanguage={currentLanguage}\n        location={location}\n        style={{ float: \"right\" }}\n      />\n    </div>\n    <ol className={classes.menu}>\n      <li>\n        <Link\n          to={`/about/${languages[currentLanguage]}`}\n          className={classes.subtitle}\n        >\n          About\n        </Link>\n      </li>\n      <li>\n        <Link to={`/${languages[currentLanguage]}`} className={classes.title}>\n          Home\n        </Link>\n      </li>\n    </ol>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n// import { StaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./Header\"\nimport \"./layout.css\"\nimport classes from \"./layout.module.scss\"\n\nconst Layout = ({ children, location, currentLanguage = \"English\" }) => (\n  <div className={classes.root}>\n    <Header\n      siteTitle=\"A Mathematical Journey\"\n      {...{ currentLanguage, location }}\n    />\n    <main>\n      <article className={classes.article}>{children}</article>\n    </main>\n    <footer>\n      ¬© {new Date().getFullYear()}, Built with\n      {` `}\n      <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n    </footer>\n  </div>\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  if (!pageResources) {\n    return null\n  }\n\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","export default class Game {\n  PLAYERS = [\"X\", \"O\"];\n  NULL = \"n\";\n  EMPTY = \".\";\n  UNKNOW = \"?\";\n\n  actions(state) {\n    let output = [];\n    for (let index = 0; index < 9; index++) {\n      if (state[index] === \".\") {\n        output.push(index);\n      }\n    }\n    return output;\n  }\n\n  getPlayerID(stateOrPlayer) {\n    if (stateOrPlayer.length === 9) {\n      let step = 0;\n      for (let i = 0; i < 9; i++) {\n        if (stateOrPlayer[i] !== \".\") {\n          step++;\n        }\n      }\n      return step % 2;\n    }\n    else if(stateOrPlayer.length === 1){\n        return this.PLAYERS.indexOf(stateOrPlayer);\n    }\n    else{\n        return null;\n    }\n  }\n\n  getPlayer(state) {\n    return this.PLAYERS[this.getPlayerID(state)];\n  }\n\n  getAdversary(player) {\n    if (player === this.PLAYERS[0]) {\n      return this.PLAYERS[1];\n    }\n    if (player === this.PLAYERS[1]) {\n      return this.PLAYERS[0];\n    }\n  }\n\n\n  play(state, action) {\n    let player = this.getPlayer(state);\n    let newState =\n      state.substring(0, action) + player + state.substring(action + 1);\n    return newState;\n  }\n\n  isFull(state) {\n    for (let i = 0; i < 9; i++) {\n      if (state[i] === \".\") {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  isFinished(state) {\n    for (let i = 0; i < 3; i++) {\n      if (\n        state[3 * i] === state[3 * i + 1] &&\n        state[3 * i + 1] === state[3 * i + 2] &&\n        state[3 * i] !== this.EMPTY\n      ) {\n        return true;\n      }\n      if (\n        state[i] === state[3 + i] &&\n        state[3 + i] === state[6 + i] &&\n        state[i] !== this.EMPTY\n      ) {\n        return true;\n      }\n    }\n    if (\n      state[0] === state[4] &&\n      state[4] === state[8] &&\n      state[0] !== this.EMPTY\n    ) {\n      return true;\n    }\n    if (\n      state[2] === state[4] &&\n      state[4] === state[6] &&\n      state[2] !== this.EMPTY\n    ) {\n      return true;\n    }\n    return this.isFull(state);\n  }\n\n  getWinner(state) {\n    for (let i = 0; i < 3; i++) {\n      if (\n        state[3 * i] === state[3 * i + 1] &&\n        state[3 * i + 1] === state[3 * i + 2] &&\n        state[3 * i] !== this.EMPTY\n      ) {\n        return state[3 * i];\n      }\n      if (\n        state[i] === state[3 + i] &&\n        state[3 + i] === state[6 + i] &&\n        state[i] !== this.EMPTY\n      ) {\n        return state[i];\n      }\n    }\n    if (\n      state[0] === state[4] &&\n      state[4] === state[8] &&\n      state[0] !== this.EMPTY\n    ) {\n      return state[0];\n    }\n    if (\n      state[2] === state[4] &&\n      state[4] === state[6] &&\n      state[2] !== this.EMPTY\n    ) {\n      return state[2];\n    }\n    if (this.isFull(state)) {\n      return this.NULL;\n    }\n    return this.UNKNOW;\n  }\n\n  getVictory(state) {\n    for (let i = 0; i < 3; i++) {\n      if (\n        state[3 * i] === state[3 * i + 1] &&\n        state[3 * i + 1] === state[3 * i + 2] &&\n        state[3 * i] !== this.EMPTY\n      ) {\n        return [{col: 0, line:i},{col: 2, line:i}];\n      }\n      if (\n        state[i] === state[3 + i] &&\n        state[3 + i] === state[6 + i] &&\n        state[i] !== this.EMPTY\n      ) {\n        return [{col: i, line:0},{col: i, line:2}];\n      }\n    }\n    if (\n      state[0] === state[4] &&\n      state[4] === state[8] &&\n      state[0] !== this.EMPTY\n    ) {\n      return [{col: 0, line:0},{col: 2, line:2}];\n    }\n    if (\n      state[2] === state[4] &&\n      state[4] === state[6] &&\n      state[2] !== this.EMPTY\n    ) {\n      return [{col: 2, line:0},{col: 0, line:2}];\n    }\n    return [];\n  }\n}\n","import Game from \"./game\"\n\nconst game = new Game()\n\n// function getTree(state) {\n//   //return a tree which conatins all possibilities\n//   if (game.isFinished(state)) {\n//     return { state: state, winner: game.getWinner(state) };\n//   } else {\n//     let PossibleActions = game.actions(state);\n//     let output = { state: state };\n//     let player = game.getPlayer(state);\n//     let nulIsPossible = false;\n//     let playerWin = false;\n//     for (\n//       let actionIndex = 0;\n//       actionIndex < PossibleActions.length;\n//       actionIndex++\n//     ) {\n//       let action = PossibleActions[actionIndex];\n//       let subTree = getTree(game.play(state, action));\n//       output[action] = subTree;\n//       if (player === subTree[\"winner\"]) {\n//         playerWin = true;\n//       }\n//       if (subTree[\"winner\"] === game.NULL) {\n//         nulIsPossible = true;\n//       }\n//     }\n//     if (playerWin) {\n//       output[\"winner\"] = player;\n//     } else {\n//       if (nulIsPossible) {\n//         output[\"winner\"] = game.NULL;\n//       } else {\n//         output[\"winner\"] = game.getAdversary(player);\n//       }\n//     }\n//     return output;\n//   }\n// }\n\n// function getTreeEco(state) {\n//   //return a tree which stop after findin an winnig acction for the cureent player\n//   if (game.isFinished(state)) {\n//     return { state: state, winner: game.getWinner(state) };\n//   } else {\n//     let PossibleActions = game.actions(state);\n//     let output = { state: state };\n//     let player = game.getPlayer(state);\n//     let nulIsPossible = false;\n//     let playerWin = false;\n//     for (\n//       let actionIndex = 0;\n//       actionIndex < PossibleActions.length;\n//       actionIndex++\n//     ) {\n//       let action = PossibleActions[actionIndex];\n//       let subTree = getTree(game.play(state, action));\n//       output[action] = subTree;\n//       if (player === subTree[\"winner\"]) {\n//         playerWin = true;\n//         output[\"winner\"] = player;\n//         return output;\n//       }\n//       if (subTree[\"winner\"] === game.NULL) {\n//         nulIsPossible = true;\n//       }\n//     }\n//     if (playerWin) {\n//       output[\"winner\"] = player;\n//     } else {\n//       if (nulIsPossible) {\n//         output[\"winner\"] = game.NULL;\n//       } else {\n//         output[\"winner\"] = game.getAdversary(player);\n//       }\n//     }\n//     return output;\n//   }\n// }\n\nfunction feelSolutions(solution, state, curentPlayer, robot) {\n  // feel the object solution with\n  // entry: a grid\n  // output: the winer, how win after each action, and the number of leaf needed for the computation\n  let winner\n  let posibilities = []\n  let player = game.PLAYERS[curentPlayer]\n  let adversary = game.PLAYERS[(1 + curentPlayer) % 2]\n\n  if (solution[state] === undefined) {\n    solution[state] = {\n      ends: state,\n      curentPlayer: curentPlayer,\n      winner: \"\",\n      timeToWin: null,\n    }\n  }\n\n  if (game.getWinner(state) !== game.UNKNOW) {\n    winner = game.getWinner(state).toLowerCase()\n    solution[state].winner = winner\n    solution[state].timeToWin = 1\n    solution[state].final = true\n    return { winner: winner, timeToWin: 1 }\n  }\n\n  for (let action = 0; action < 9; action++) {\n    if (solution[state].ends[action] === game.EMPTY) {\n      //We don't know the issue of this action\n      let newState =\n        state.substring(0, action) + player + state.substring(action + 1)\n\n      let winner\n      let timeToWin\n      let result\n      if (\n        solution[newState] !== undefined &&\n        solution[newState].winner !== \"\"\n      ) {\n        //we already now the solution\n        winner = solution[newState].winner\n        timeToWin = solution[newState].timeToWin\n      } else {\n        result = feelSolutions(\n          solution,\n          newState,\n          (curentPlayer + 1) % 2,\n          robot\n        )\n        winner = result.winner\n        timeToWin = result.timeToWin\n      }\n\n      //We know who will win if current player play this action\n      solution[state].ends =\n        solution[state].ends.substring(0, action) +\n        winner +\n        solution[state].ends.substring(action + 1)\n\n      posibilities.push({ winner, timeToWin })\n    }\n  }\n\n  let minTimeToWin\n  if (posibilities.map(x => x.winner).includes(player.toLowerCase())) {\n    minTimeToWin = Math.min(\n      ...posibilities\n        .map(x => (x.winner === player.toLowerCase() ? x.timeToWin : null))\n        .filter(x => x !== null)\n    )\n    winner = player.toLowerCase()\n  } else {\n    if (posibilities.map(x => x.winner).includes(game.NULL)) {\n      minTimeToWin = Math.min(\n        ...posibilities\n          .map(x => (x.winner === game.NULL ? x.timeToWin : null))\n          .filter(x => x !== null)\n      )\n      winner = game.NULL\n    } else {\n      if (posibilities.map(x => x.winner).includes(adversary.toLowerCase())) {\n        minTimeToWin = Math.min(\n          ...posibilities\n            .map(x =>\n              x.winner === adversary.toLowerCase() ? x.timeToWin : null\n            )\n            .filter(x => x !== null)\n        )\n        winner = adversary.toLowerCase()\n      }\n    }\n  }\n\n  solution[state].winner = winner\n  if (curentPlayer === robot) {\n    solution[state].timeToWin = minTimeToWin\n  } else {\n    solution[state].timeToWin = posibilities\n      .map(x => x.timeToWin)\n      .reduce((total, x) => total + x)\n  }\n  return {\n    winner: solution[state].winner,\n    timeToWin: solution[state].timeToWin,\n  }\n}\n\n// function opimalTree(tree, state, curentPlayer, robot, origineX, origineY) {\n//   //return the minimal tree (in size) that prove robot will obtain at least a null match\n//   if (tree[state].final) {\n//     return [{ state, X: origineX, Y: origineY, winner: tree[state].winner }];\n//   }\n//   let player = game.PLAYERS[curentPlayer];\n\n//   if (curentPlayer === robot) {\n//     for (let action = 0; action < 9; action++) {\n//       if (state[action] === \".\") {\n//         let newState =\n//           state.substring(0, action) + player + state.substring(action + 1);\n//         if (\n//           tree[state].timeToWin === tree[newState].timeToWin &&\n//           tree[state].winner === tree[newState].winner\n//         ) {\n//           return [\n//             { state, X: origineX, Y: origineY, winner: tree[state].winner },\n//             ...opimalTree(\n//               tree,\n//               newState,\n//               (curentPlayer + 1) % 2,\n//               robot,\n//               origineX + 1,\n//               origineY\n//             )\n//           ];\n//         }\n//       }\n//     }\n//   } else {\n//     let output = [\n//       { state, X: origineX, Y: origineY, winner: tree[state].winner }\n//     ];\n//     for (let action = 0; action < 9; action++) {\n//       if (state[action] === \".\") {\n//         let newState =\n//           state.substring(0, action) + player + state.substring(action + 1);\n//         let subTree = opimalTree(\n//           tree,\n//           newState,\n//           (curentPlayer + 1) % 2,\n//           robot,\n//           origineX + 1,\n//           origineY\n//         );\n//         output = [...output, ...subTree];\n//         origineY = subTree[subTree.length - 1].Y + 1;\n//       }\n//     }\n//     return output;\n//   }\n// }\n\nfunction treeToPosition(tree) {\n  let height = 0\n  let currentIndexList = []\n  let currentActionsList = []\n  let id = currentActionsList.join(\"\")\n  let currentState = tree[id]\n  let goingBack = false\n\n  let output = []\n  output.push({\n    ...currentState,\n    x: currentActionsList.length,\n    y: height,\n    id: id,\n  })\n\n  let parent_position = [[0, 0]]\n  if (currentState.childrenActions.length > 0) {\n    currentIndexList.push(0)\n    currentActionsList.push(currentState.childrenActions[0])\n    currentState = tree[currentActionsList.join(\"\")]\n  }\n\n  while (currentIndexList.length > 0) {\n    currentActionsList = []\n    for (let i = 0; i < currentIndexList.length; i++) {\n      currentActionsList.push(\n        tree[currentActionsList.join(\"\")].childrenActions[currentIndexList[i]]\n      )\n    }\n    let id = currentActionsList.join(\"\")\n    currentState = tree[id]\n\n    if (!goingBack) {\n      //en mode forward on affiche les noeuds\n      output.push({\n        ...currentState,\n        x: currentActionsList.length,\n        y: height,\n        id: id,\n        parent: parent_position[parent_position.length - 1],\n      })\n      parent_position.push([currentActionsList.length, height])\n\n      if (currentState.childrenActions.length > 0) {\n        //si il y a des fils, on y va\n        currentIndexList.push(0)\n      } else {\n        //si non, on verifie la presence de voisins\n        currentState = tree[currentActionsList.slice(0, -1).join(\"\")]\n        parent_position.pop()\n\n        currentIndexList[currentIndexList.length - 1] =\n          currentIndexList[currentIndexList.length - 1] + 1\n      }\n    } else {\n      //en mode back, on considere\n      currentState = tree[currentActionsList.slice(0, -1).join(\"\")]\n\n      parent_position.pop()\n\n      currentIndexList[currentIndexList.length - 1] =\n        currentIndexList[currentIndexList.length - 1] + 1\n    }\n\n    if (\n      currentIndexList[currentIndexList.length - 1] >=\n        currentState.childrenActions.length ||\n      currentState.retracted\n    ) {\n      //si il n'y a plus d'enfant ou qu'on nous demande de ne pas les traiter\n      currentIndexList.pop()\n      goingBack = true\n    } else {\n      if (currentIndexList[currentIndexList.length - 1] !== 0) {\n        height += 1\n      }\n      goingBack = false\n    }\n  }\n  return output\n}\n\nfunction reduceToOpimalTree(tree, treeToFeel, id, grid, curentPlayer, robot) {\n  //return the minimal tree (in size) that prove robot will obtain at least a null match\n  if (game.isFinished(grid)) {\n    treeToFeel[id] = {\n      grid: grid,\n      ends: grid,\n      childrenActions: [],\n      timeToWin: tree[grid].timeToWin,\n      winner: tree[grid].winner,\n    }\n  } else {\n    const actions = game.actions(grid)\n\n    if (curentPlayer === robot) {\n      let bestAction\n      let newGrid\n      let minimalTimeToWin = 1000000\n\n      actions.forEach(action => {\n        newGrid = game.play(grid, action)\n        if (\n          tree[newGrid].timeToWin < minimalTimeToWin &&\n          tree[newGrid].winner === tree[grid].winner\n        ) {\n          minimalTimeToWin = tree[newGrid].timeToWin\n          bestAction = action\n        }\n      })\n      treeToFeel[id] = {\n        grid: grid,\n        ends: tree[grid].ends,\n        childrenActions: [bestAction],\n        timeToWin: tree[grid].timeToWin,\n        winner: tree[grid].winner,\n      }\n      reduceToOpimalTree(\n        tree,\n        treeToFeel,\n        id + bestAction,\n        game.play(grid, bestAction),\n        (curentPlayer + 1) % 2,\n        robot\n      )\n    } else {\n      treeToFeel[id] = {\n        grid: grid,\n        ends: tree[grid].ends,\n        childrenActions: actions,\n        timeToWin: tree[grid].timeToWin,\n        winner: tree[grid].winner,\n      }\n      actions.forEach(action => {\n        reduceToOpimalTree(\n          tree,\n          treeToFeel,\n          id + action,\n          game.play(grid, action),\n          (curentPlayer + 1) % 2,\n          robot\n        )\n      })\n    }\n  }\n}\n\nlet completTree = {}\nfeelSolutions(completTree, \".........\", 0, 2)\n\nfunction perfectPlayer(state) {\n  let solutions = completTree[state].ends\n  let victory = completTree[state].winner\n  let player = game.getPlayer(state)\n\n  let actions = []\n  if (victory === player.toLowerCase()) {\n    let nextGrid\n    let score\n    let bestScore = 0\n    for (let i = 0; i < 9; i++) {\n      if (solutions[i] === victory) {\n        nextGrid = completTree[game.play(state, i)].ends\n        score = nextGrid.split(\"\").filter(x => x === player.toLowerCase())\n          .length\n        if (score > bestScore) {\n          actions = [i]\n        } else if (score === bestScore) {\n          actions.push(i)\n        }\n      }\n    }\n  } else if (victory === game.NULL) {\n    for (let i = 0; i < 9; i++) {\n      if (solutions[i] === game.NULL) {\n        actions.push(i)\n      }\n    }\n  } else {\n    for (let i = 0; i < 9; i++) {\n      if (state[i] === game.EMPTY) {\n        actions.push(i)\n      }\n    }\n  }\n\n  let action = actions[Math.floor(actions.length * Math.random())]\n  return action\n}\n\nexport {\n  completTree,\n  perfectPlayer,\n  treeToPosition,\n  feelSolutions,\n  reduceToOpimalTree,\n}\n","import React from \"react\"\nimport classes from \"./Board.module.scss\"\n\nconst Board = ({\n  width,\n  height,\n  state,\n  winner,\n  solution,\n  transform,\n  localAction,\n  globalAction,\n  victory,\n  addedIndex,\n}) => (\n  <g\n    className={`${classes.board} ${classes.winner} ${\n      globalAction ? classes.pointerClickable : \"\"\n    }`}\n    transform={transform}\n    onClick={globalAction ? globalAction() : undefined}\n  >\n    <rect\n      x={0}\n      y={0}\n      width={width}\n      height={height}\n      className={`${\n        winner\n          ? winner.toLowerCase() === \"x\"\n            ? classes.winnerX\n            : winner.toLowerCase() === \"o\"\n            ? classes.winnerO\n            : winner.toLowerCase() === \".\"\n            ? classes.winnerUnKnoned\n            : winner.toLowerCase() === \"n\"\n            ? classes.winnerNull\n            : winner.toLowerCase() === \"n\"\n            ? classes.winnerSelected\n            : \"\"\n          : \"\"\n      }`}\n\n      // onClick={globalAction && globalAction()}\n    />\n    <g className={classes.elements}>\n      {state.split(\"\").map((player, index) => {\n        let x = width / 6 + (Math.floor(index % 3) * width) / 3\n        let y = height / 6 + (Math.floor(index / 3) * height) / 3\n\n        switch (player) {\n          case \"X\":\n            return (\n              <g\n                key={index}\n                className={`${classes.X} ${\n                  addedIndex === index ? classes.justAdded : \"\"\n                }`}\n              >\n                <line\n                  x1={x - (width * 0.4) / 3}\n                  y1={y - (height * 0.4) / 3}\n                  x2={x + (width * 0.4) / 3}\n                  y2={y + (height * 0.4) / 3}\n                />\n                <line\n                  x1={x + (width * 0.4) / 3}\n                  y1={y - (height * 0.4) / 3}\n                  x2={x - (width * 0.4) / 3}\n                  y2={y + (height * 0.4) / 3}\n                />\n              </g>\n            )\n          case \"O\":\n            return (\n              <g\n                key={index}\n                className={`${classes.O} ${\n                  addedIndex === index ? classes.justAdded : \"\"\n                }`}\n              >\n                <circle r={(Math.min(width, height) * 0.4) / 3} cx={x} cy={y} />\n              </g>\n            )\n\n          default:\n            return (\n              <rect\n                key={index}\n                x={x - (width * 0.4) / 3}\n                y={y - (height * 0.4) / 3}\n                width={(width * 0.8) / 3}\n                height={(height * 0.8) / 3}\n                className={`${solution &&\n                  (solution[index] === \"x\"\n                    ? classes.solutionX\n                    : solution[index] === \"o\"\n                    ? classes.solutionO\n                    : solution[index] === \".\"\n                    ? classes.solutionUnKnoned\n                    : solution[index] === \"n\"\n                    ? classes.solutionNull\n                    : solution[index] === \"n\"\n                    ? classes.solutionSelected\n                    : classes.empty)} ${\n                  !solution && localAction ? classes.clickable : \"\"\n                } `}\n                onClick={localAction ? localAction(index) : undefined}\n              />\n            )\n        }\n      })}\n    </g>\n    <g className={classes.grid}>\n      <line x1={(width * 1) / 3} y1=\"0\" x2={(width * 1) / 3} y2={height} />\n      <line x1={(width * 2) / 3} y1=\"0\" x2={(width * 2) / 3} y2={height} />\n\n      <line x1=\"0\" y1={(height * 1) / 3} x2={width} y2={(height * 1) / 3} />\n      <line x1=\"0\" y1={(height * 2) / 3} x2={width} y2={(height * 2) / 3} />\n    </g>\n    {victory && victory.length === 2 && (\n      <line\n        x1={width / 6 + (width * victory[1].col) / 3}\n        y1={height / 6 + (height * victory[1].line) / 3}\n        x2={width / 6 + (width * victory[0].col) / 3}\n        y2={height / 6 + (height * victory[0].line) / 3}\n        className={classes.winningLine}\n      />\n    )}\n  </g>\n)\n\nexport default Board\n","import Board from'./Board.view'\n\nexport default Board","import React from \"react\"\nimport Board from \"src/components/tic-tac-toe/atoms/Board\"\nimport Game from \"src/components/tic-tac-toe/explenations/utils/game\"\nimport Link from \"src/components/tic-tac-toe/atoms/Link\"\nimport {\n  treeToPosition,\n  feelSolutions,\n  reduceToOpimalTree,\n} from \"src/components/tic-tac-toe/explenations/utils\"\n\nconst game = new Game()\n\nclass CompletTree extends React.Component {\n  constructor(props) {\n    super(props)\n\n    let treeRobot = {}\n\n    feelSolutions(treeRobot, \".........\", 0, props.robot)\n\n    let optTreeRobot = {}\n    reduceToOpimalTree(treeRobot, optTreeRobot, \"\", \".........\", 0, props.robot)\n    this.state = {\n      robot: props.robot,\n      tree: optTreeRobot,\n      initialTree: optTreeRobot,\n      height: optTreeRobot[\"\"].timeToWin,\n      heightLimited: true,\n    }\n  }\n\n  toogleChildrens(id) {\n    return () => () => {\n      this.setState({\n        tree: {\n          ...this.state.tree,\n          [id]: {\n            ...this.state.tree[id],\n            retracted: !this.state.tree[id].retracted,\n          },\n        },\n      })\n    }\n  }\n\n  reset() {\n    return () => {\n      this.setState({\n        ...this.state,\n        tree: this.state.initialTree,\n      })\n    }\n  }\n  toogleHeightLimited() {\n    return () => {\n      this.setState({\n        ...this.state,\n        heightLimited: !this.state.heightLimited,\n      })\n    }\n  }\n\n  render() {\n    const SIZE = 75\n    const treePositions = treeToPosition(this.state.tree)\n    const height = treePositions.reduce((t, x) => Math.max(t, x.y), 0)\n    return (\n      <>\n        <div\n          className={this.state.heightLimited ? \"limit-height\" : \"free-height\"}\n        >\n          <svg\n            viewBox={`0 0 1000 ${100 * (height + 1)}`}\n            style={{ width: \"100%\" }}\n          >\n            {treePositions.map(state => (\n              <React.Fragment key={state.id}>\n                <Board\n                  width={SIZE}\n                  height={SIZE}\n                  state={state.grid}\n                  transform={`translate(${12 + state.x * 100},${12 +\n                    state.y * 100})`}\n                  globalAction={this.toogleChildrens(state.id)}\n                  winner={state.winner}\n                  victory={game.getVictory(state.grid)}\n                  addedIndex={\n                    state.id && parseInt(state.id.charAt(state.id.length - 1))\n                  }\n                />\n                {state.parent && (\n                  <Link\n                    x0={14 + state.parent[0] * 100 + SIZE}\n                    y0={12 + state.parent[1] * 100 + SIZE / 2}\n                    x1={10 + state.x * 100}\n                    y1={12 + state.y * 100 + SIZE / 2}\n                  />\n                )}\n              </React.Fragment>\n            ))}\n          </svg>\n        </div>\n        {100 * (height + 1) > 500 && (\n          <button\n            onClick={this.toogleHeightLimited()}\n            className=\"treeExtension\"\n          >\n            {this.state.heightLimited ? \"Extend\" : \"Retract\"}\n          </button>\n        )}\n        <button onClick={this.reset()}>RESET</button>\n      </>\n    )\n  }\n}\nexport default CompletTree\n","import React from \"react\"\n\nconst Link = ({ x0, y0, x1, y1 }) => (\n  <path\n    style={{\n      stroke: \"var(--gray-700)\",\n      strokeWidth: 3,\n      fill: \"none\",\n    }}\n    d={`M${x0} ${y0} H${(x1 + x0) / 2} V${y1} H${x1}`}\n  />\n)\n\nexport default Link\n","import Link from'./Link.view'\n\nexport default Link"],"sourceRoot":""}