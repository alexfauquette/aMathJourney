{"version":3,"sources":["webpack:///./src/pages/tic-tac-toe/fr.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","src_components_layout__WEBPACK_IMPORTED_MODULE_1__","gatsby__WEBPACK_IMPORTED_MODULE_2__","src_components_seo__WEBPACK_IMPORTED_MODULE_3__","src_components_tic_tac_toe_explenations_intro__WEBPACK_IMPORTED_MODULE_4__","src_components_tic_tac_toe_explenations_history__WEBPACK_IMPORTED_MODULE_5__","src_components_tic_tac_toe_explenations_introTree__WEBPACK_IMPORTED_MODULE_6__","src_components_tic_tac_toe_explenations_recurence__WEBPACK_IMPORTED_MODULE_7__","src_components_tic_tac_toe_explenations_computerView__WEBPACK_IMPORTED_MODULE_8__","src_components_tic_tac_toe_explenations_treeSearch__WEBPACK_IMPORTED_MODULE_9__","src_components_tic_tac_toe_explenations_completTree__WEBPACK_IMPORTED_MODULE_10__","_images_algo_svg__WEBPACK_IMPORTED_MODULE_11__","_images_algo_svg__WEBPACK_IMPORTED_MODULE_11___default","_images_ends_svg__WEBPACK_IMPORTED_MODULE_12__","_images_ends_svg__WEBPACK_IMPORTED_MODULE_12___default","Page","a","createElement","location","currentLanguage","title","role","aria-label","style","color","src","possibleEnds","alt","algoPicture","robot","to"],"mappings":"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","file":"component---src-pages-tic-tac-toe-fr-js-ceea73fd48ef4a929258.js","sourcesContent":["import React from \"react\"\n// import { Link } from \"gatsby\"\n\nimport Layout from \"src/components/layout\"\nimport { Link } from \"gatsby\"\nimport SEO from \"src/components/seo\"\n\n//components\nimport PlayableIntro from \"src/components/tic-tac-toe/explenations/intro\"\nimport History from \"src/components/tic-tac-toe/explenations/history\"\nimport TreeIntro from \"src/components/tic-tac-toe/explenations/introTree\"\nimport RecurenceExample from \"src/components/tic-tac-toe/explenations/recurence\"\nimport ComputerView from \"src/components/tic-tac-toe/explenations/computerView\"\nimport TreeSearch from \"src/components/tic-tac-toe/explenations/treeSearch\"\nimport CompletTree from \"src/components/tic-tac-toe/explenations/completTree\"\n\n//images\nimport algoPicture from \"./images/algo.svg\"\nimport possibleEnds from \"./images/ends.svg\"\nconst Page = () => (\n  <Layout location=\"/tic-tac-toe\" currentLanguage=\"Fran√ßais\">\n    <SEO title=\"Morpion\" />\n\n    <noscript>\n      Pour faire fonctionner les animations, merci d'activer votre javscript.\n    </noscript>\n\n    <h1>Peut on battre une IA au morpion?</h1>\n\n    <p>\n      La plupart des articles scientifiques en intelligences artificielle qui\n      font sensation parlent d'ordinateur battant le champion du monde d‚Äô√©chec,\n      de Go, et bient√¥t Dota. Dans cet article, on va retourner √† l'age de\n      pierre de l'IA pour jouer au morpion.\n    </p>\n    <p>\n      Mais avant d'en dire plus, voyons √† quel point votre ordinateur est bon au\n      morpion. Pour rappel, le morpion se joue sur une grille de taille 3x3. Les\n      joueurs posent l'un apr√®s l'autre leur symbole dans une case, le premier √†\n      en avoir align√© 3 √† gagner. Par d√©faut, le premier joueur joue les croix,\n      et le deuxi√®me les ronds.\n    </p>\n\n    <PlayableIntro />\n\n    <h2>Comment votre ordinateur voit le monde.</h2>\n\n    <p>\n      Pour votre ordinateur, le monde se limite √† des grilles de morpion. C'est\n      un peu limit√© comme vision du monde, mais √ßa lui suffit pour vous mettre\n      la p√¢t√©e. Quand on commence une partie, l'ordinateur voit une grille vide.\n      Si c'est son tour de jouer, il choisit une case et affiche le plateau en\n      remplissant la case qu'il a choisi. Quand c'est √† vous de jouer il attend\n      que vous choisissiez une case pour faire avancer le jeu.\n    </p>\n\n    <History />\n\n    <p>\n      Jusque-l√† pas grand-chose de sp√©cial. Une partie de morpion c'est une\n      suite de diff√©rentes grilles, de plus en plus comple√®te. Mais la puissance\n      de l'ordinateur, c'est qu'il peut retourner facilement dans le passer pour\n      tester d'autre possibilit√©s. Dans l'exemple ci-dessous, le premier joueur\n      r√©alise qu'il s'est tromp√© en choisissant son deuxi√®me coup. Qu'il aurait\n      pu gagner en jouant autrement. Ce n'est qu'un exemple, mais avec beaucoup\n      de patience, vous pouvez afficher toutes les parties possibles et\n      imaginables.\n    </p>\n\n    <TreeIntro />\n\n    <p>\n      Et voila, un magnifique arbre, avec √† gauche sa racine d'o√π partent toutes\n      les parties de morpion imaginable, et une ramification √† chaque grille.\n      Bien sur pour un humain, tester toutes les possibilit√©s serait long et\n      ennuyeux. Mais votre ordinateur, ne se plein (presque) jamais lui. On peut\n      donc lui demander de calculer toutes les parties de morpion possibles. √Ä\n      partir de cette connaissance, on va pouvoir calculer si un joueur √† une\n      strat√©gie gagnante ou pas, et devenir les maitres de morpion{\" \"}\n      <span role=\"img\" aria-label=\"evil\">\n        üëπ\n      </span>\n      .\n    </p>\n\n    <p>\n      Pour √™tre pr√©cis, l'ordinateur peut classer les grilles de morpion en\n      trois cat√©gories.\n    </p>\n    <ol>\n      <li>\n        <b>\n          <span style={{ color: \"blue\" }}>X</span> gagne\n        </b>{\" \"}\n        : Le joueur X √† un moyen de gagner quelque soit les choix de{\" \"}\n        <span style={{ color: \"red\" }}>O</span>.\n      </li>\n      <li>\n        <b>\n          <span style={{ color: \"red\" }}>O</span> gagne\n        </b>\n        : Le joueur X √† un moyen de gagner quelque soit les choix de{\" \"}\n        <span style={{ color: \"blue\" }}>X</span>\n      </li>\n      <li>\n        <b>\n          <span style={{ color: \"orange\" }}>nul</span>\n        </b>\n        : Aucun des deux joueurs n'a de strat√©gie pour gagner avec certitude.\n      </li>\n    </ol>\n    <p>\n      Bien sur, l'ordinateur prendra toujours le meilleur choix pour lui. Il va\n      tester toutes les actions qu'il peut jouer, et regarder √† quelle cat√©gorie\n      appartient la grille qu'il obtient. Il jouera en priorit√© les actions qui\n      donne une grille le faisant gagner (eh oui, il veut gagner{\" \"}\n      <span role=\"img\" aria-label=\"angel\">\n        üëº\n      </span>\n      ). Sinon, il va jouer une action qui donne match nul (c'est la vie, on ne\n      peut pas toujours gagner{\" \"}\n      <span role=\"img\" aria-label=\"disapointed\">\n        üòí\n      </span>\n      ). Et s'il n'y en a pas, il est oblig√© de jouer un coup qui donne une\n      grille gagnante pour son adversaire{\" \"}\n      <span role=\"img\" aria-label=\"crying\">\n        üò≠\n      </span>\n      .\n    </p>\n    <p>\n      Voil√†, vous pouvez rejouer contre l'ordinateur, et d√©cidant de regarder ou\n      non, quelle action fait gagner <span style={{ color: \"blue\" }}>X</span>,{\" \"}\n      <span style={{ color: \"red\" }}>O</span> ou fait{\" \"}\n      <span style={{ color: \"orange\" }}>nul</span>. Vous pouvez m√™me jouer\n      contre vous m√™me si vous en avez mare de perdre{\" \"}\n      <span role=\"img\" aria-label=\"smile\">\n        üòâ\n      </span>\n    </p>\n\n    <ComputerView />\n\n    <h2>Comment savoir si une grille est gagnante?</h2>\n    <p>\n      On va commencer par des cas simple, voire basique. Si il y a trois{\" \"}\n      <span style={{ color: \"blue\" }}>X</span> (ou trois{\" \"}\n      <span style={{ color: \"red\" }}>O</span>) align√©s, alors c'est une grille\n      gagnante pour <span style={{ color: \"blue\" }}>X</span> (ou{\" \"}\n      <span style={{ color: \"red\" }}>O</span>). Et si la grille est remplie sans\n      que 3 symbols soient allig√©s, c'est une grille{\" \"}\n      <span style={{ color: \"orange\" }}>nul</span>. #CaptainObvious C'est\n      basique, mais √ßa va meiux en le disant.\n    </p>\n\n    <img\n      src={possibleEnds}\n      alt=\"exemple de cas finaux possible pour le morpion\"\n    />\n\n    <p>\n      Maintnenant on va g√©rer les cas plus compliqu√©s. Premi√®rement on va\n      supposer que tout le monde est un bon joueur. Si un bon joueur peut jouer\n      une action qui est gagnant pour lui il la joue. Sinon il joue pour obtenir\n      un nul, et sinon il est oblig√© de perdre. Bref, la m√™me logique que notre\n      ordinateur.\n    </p>\n    <p>\n      Conclusion, si parmi les actions possibles il y en a une qui fait gagner\n      le joueur dont c'est le tour, on va dire que la grille est gagnante pour\n      ce joueur. S'il n'a pas de coup gagnant mais au moins un coup qui lui\n      permet d'avoir un nul, on dit que c'est une grille nul. Et si tous les\n      coups donnent une grille gagnante pour son adversaire, on dit que la\n      grille actuelle est gagnante pour l'adversaire.\n    </p>\n    <p>\n      Avec un exemple √ßa sera plus simple. Dans les 3 cas c'est √†{\" \"}\n      <span style={{ color: \"blue\" }}>X</span> de jouer. Dans le premier cas, il\n      a une action qui l'am√®ne sur une grille gagnante pour lui. Dans le second\n      cas, il y a des actions <span style={{ color: \"orange\" }}>nul</span> et\n      des actiosn gagantes pour <span style={{ color: \"red\" }}>O</span>, c'est\n      donc une grille <span style={{ color: \"orange\" }}>nul</span>. Et le\n      dernier cas, quoi que fasse <span style={{ color: \"blue\" }}>X</span>, il\n      arrivera sur une grille permettant √†{\" \"}\n      <span style={{ color: \"red\" }}>O</span> de gagner. C'est donc une grille\n      gagnante pour <span style={{ color: \"red\" }}>O</span>.\n    </p>\n\n    <RecurenceExample />\n\n    <p>\n      La fa√ßon la plus simple de calculer qui va gagner est d'appliquer les\n      r√®gles que l'on vient de pr√©senter. On cr√© une fonction \"getWinner\"\n      (\"donne le gagnant\" en anglais), qui pour une grille de morpion donn√©e\n      renvoit le gagnant associ√©. Si c'est un cas final, la fonction revoit le\n      gagnant. Si non, on test toutes les actions possibles, on appel\n      \"getWinner\" pour savoir si ces actions font gagner{\" \"}\n      <span style={{ color: \"blue\" }}>X</span>,{\" \"}\n      <span style={{ color: \"red\" }}>O</span> ou{\" \"}\n      <span style={{ color: \"orange\" }}>nul</span>. Maintnenant que l'on connait\n      le resultat de toute les actions possbles, on peut utiliser la relation de\n      r√©curence pr√©c√©dente pour savoir qui sera le gagant.\n    </p>\n\n    <img src={algoPicture} alt=\"sch√©mat de l'algorithme\" />\n\n    <p>\n      What ?!? Pour calculer le r√©ultat de \"getWiner\" il faut utiliser ...\n      \"getWiner\" ? Pas d'inquietude, c'est normal, c'est une fonction r√©curcive.\n      A chaque fois que \"getWinner\" appelle \"getWinner\", elle lui demande de\n      calculer le r√©sultat pour une grille un peu plus remplie. Donc si\n      \"getWiner\" appel \"getWiner\" qui appel \"getWiner\", etc 9 fois, on arrive\n      forc√©ment √† un cas final, car chaque fonction ajoute un symbole, et avec 9\n      symboles, la grille est remplie. Grace au r√©sultat des grilles remplies,\n      on va pouvoir galculer les \"getWinner\" pr√©c√©dents, puis avec leurs\n      resulats on calcul les \"getWinner\" pr√©c√©dents, et on continue comme √ßa\n      jusque √† arriver au premier.\n    </p>\n    <p>\n      Pas convaincu ? En appuyant sur next, faite d√©filer l'algorithme √©tape par\n      √©tape.\n    </p>\n    <TreeSearch />\n\n    <h2>Et le r√©sultat est ...</h2>\n    <p>\n      Les plus curieux d'entre vous l'auront remarqu√©, le morpion est un jeu se\n      finissant par un match nul, si les deux joueurs sont parfait. Pour le\n      prouver, le plus simple serait d'afficher tout l'arbre. Ca serait un peu\n      compliqu√© √† lire. On propose donc de prouver que le premier joueur √† une\n      strat√©gie pour obtenir nul quoi que fasse le deuxi√®me joueur. Puis de\n      faire la m√™me chose pour le deuxi√®me joueur. Comme le premier joueur √† une\n      strat√©gie pour faire match nul, les deuxi√®me joueur ne peut pas avoir de\n      strat√©gie gagnante, et inversement.\n    </p>\n    <p>\n      Ci-dessous, l'arbre pour le premier joueur. Quand c'est √† lui de jouer, on\n      affiche une seule action. Cette action est celle de sa strat√©gie. Quand\n      c'est le tour du deuxi√®me joueur, on affiche toutes les possibilit√©s, pour\n      √™tre sur que quoi qu'il fasse, le premier joueur aura moyen d'obtenir au\n      moins un match nul.\n    </p>\n    <p>Astuce: cliquez sur les grilles pour r√©duire l'arbre.</p>\n\n    <CompletTree robot={0} />\n\n    <p>\n      Pourquoi commencer par premier joueur ? Parce que c'est l'arbre le plus\n      petit. Celui du deuxi√®me joueur √©tant un peu plus gros,\n      il est dans une autre page{\" \"}\n      <Link to={\"/tic-tac-toe/second-player-tree/fr\"}>(celle-ci)</Link>\n    </p>\n  </Layout>\n)\n\nexport default Page\n"],"sourceRoot":""}