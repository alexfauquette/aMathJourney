{"version":3,"sources":["webpack:///./src/pages/tic-tac-toe/index.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","src_components_layout__WEBPACK_IMPORTED_MODULE_2__","src_components_seo__WEBPACK_IMPORTED_MODULE_3__","src_components_tic_tac_toe_explenations_intro__WEBPACK_IMPORTED_MODULE_4__","src_components_tic_tac_toe_explenations_history__WEBPACK_IMPORTED_MODULE_5__","src_components_tic_tac_toe_explenations_introTree__WEBPACK_IMPORTED_MODULE_6__","src_components_tic_tac_toe_explenations_recurence__WEBPACK_IMPORTED_MODULE_7__","src_components_tic_tac_toe_explenations_computerView__WEBPACK_IMPORTED_MODULE_8__","src_components_tic_tac_toe_explenations_treeSearch__WEBPACK_IMPORTED_MODULE_9__","src_components_tic_tac_toe_explenations_completTree__WEBPACK_IMPORTED_MODULE_10__","_images_algo_svg__WEBPACK_IMPORTED_MODULE_11__","_images_algo_svg__WEBPACK_IMPORTED_MODULE_11___default","_images_ends_svg__WEBPACK_IMPORTED_MODULE_12__","_images_ends_svg__WEBPACK_IMPORTED_MODULE_12___default","SecondPage","a","createElement","location","title","src","possibleEnds","alt","algoPicture","robot","to"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,KAAAO,EAAAP,EAAA,KAAAQ,EAAAR,EAAA,KAAAS,EAAAT,EAAA,KAAAU,EAAAV,EAAA,KAAAW,EAAAX,EAAA,KAAAY,EAAAZ,EAAA,KAAAa,EAAAb,EAAA,KAAAc,EAAAd,EAAA,KAAAe,EAAAf,EAAA,KAAAgB,EAAAhB,EAAA,KAAAiB,EAAAjB,EAAAK,EAAAW,GAAAE,EAAAlB,EAAA,KAAAmB,EAAAnB,EAAAK,EAAAa,GAuMeE,UAtLI,kBACjBhB,EAAAiB,EAAAC,cAACf,EAAA,EAAD,CAAQgB,SAAS,gBACfnB,EAAAiB,EAAAC,cAACd,EAAA,EAAD,CAAKgB,MAAM,gBAEXpB,EAAAiB,EAAAC,cAAA,kEAGElB,EAAAiB,EAAAC,cAAA,kDAEAlB,EAAAiB,EAAAC,cAAA,mQAMAlB,EAAAiB,EAAAC,cAAA,8RAOAlB,EAAAiB,EAAAC,cAACb,EAAA,EAAD,MAEAL,EAAAiB,EAAAC,cAAA,6CAEAlB,EAAAiB,EAAAC,cAAA,yVAQAlB,EAAAiB,EAAAC,cAACZ,EAAA,EAAD,MAEAN,EAAAiB,EAAAC,cAAA,qXASAlB,EAAAiB,EAAAC,cAACX,EAAA,EAAD,MAEAP,EAAAiB,EAAAC,cAAA,kbASAlB,EAAAiB,EAAAC,cAAA,8WAQAlB,EAAAiB,EAAAC,cAAA,UACElB,EAAAiB,EAAAC,cAAA,UACElB,EAAAiB,EAAAC,cAAA,oBADF,4DAGAlB,EAAAiB,EAAAC,cAAA,UACElB,EAAAiB,EAAAC,cAAA,iBADF,+EAIAlB,EAAAiB,EAAAC,cAAA,UACElB,EAAAiB,EAAAC,cAAA,oBADF,gFAKFlB,EAAAiB,EAAAC,cAAA,4OAMAlB,EAAAiB,EAAAC,cAAA,8IAKAlB,EAAAiB,EAAAC,cAACT,EAAA,EAAD,MAEAT,EAAAiB,EAAAC,cAAA,yDACAlB,EAAAiB,EAAAC,cAAA,iQAMAlB,EAAAiB,EAAAC,cAAA,OACEG,IAAKC,IACLC,IAAI,iDAGNvB,EAAAiB,EAAAC,cAAA,yTAOAlB,EAAAiB,EAAAC,cAAA,4TAOAlB,EAAAiB,EAAAC,cAAA,qSAOAlB,EAAAiB,EAAAC,cAACV,EAAA,EAAD,MAEAR,EAAAiB,EAAAC,cAAA,2aASAlB,EAAAiB,EAAAC,cAAA,OAAKG,IAAKG,IAAaD,IAAI,2BAE3BvB,EAAAiB,EAAAC,cAAA,4nBAWAlB,EAAAiB,EAAAC,cAAA,qIAIAlB,EAAAiB,EAAAC,cAACR,EAAA,EAAD,MAEAV,EAAAiB,EAAAC,cAAA,mCACAlB,EAAAiB,EAAAC,cAAA,qRAMAlB,EAAAiB,EAAAC,cAAA,oQAMAlB,EAAAiB,EAAAC,cAAA,oGAKAlB,EAAAiB,EAAAC,cAACP,EAAA,EAAD,CAAac,MAAO,IAEpBzB,EAAAiB,EAAAC,cAAA,sFAEOlB,EAAAiB,EAAAC,cAAChB,EAAA,EAAD,CAAMwB,GAAI,sCAAV,QAFP","file":"component---src-pages-tic-tac-toe-index-js-69d25e04d96c657273a9.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from \"src/components/layout\"\nimport SEO from \"src/components/seo\"\n\nimport PlayableIntro from \"src/components/tic-tac-toe/explenations/intro\"\nimport History from \"src/components/tic-tac-toe/explenations/history\"\nimport TreeIntro from \"src/components/tic-tac-toe/explenations/introTree\"\nimport RecurenceExample from \"src/components/tic-tac-toe/explenations/recurence\"\nimport ComputerView from \"src/components/tic-tac-toe/explenations/computerView\"\nimport TreeSearch from \"src/components/tic-tac-toe/explenations/treeSearch\"\nimport CompletTree from \"src/components/tic-tac-toe/explenations/completTree\"\n\n//images\nimport algoPicture from \"./images/algo.svg\"\nimport possibleEnds from \"./images/ends.svg\"\nconst SecondPage = () => (\n  <Layout location=\"/tic-tac-toe\">\n    <SEO title=\"Tic-tac-toe\" />\n\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n\n     \n      <h1>Can you defeat an AI at tic-tac-toe?</h1>\n\n      <p>\n        Most of the exciting scientific articles in artificial inteligence are\n        about computer defeating human at famouse game. For this article lets\n        just consider the simple game of tic-tac-toe and solve it with technics\n        comming from the stone age of AI.\n      </p>\n      <p>\n        But let start by testing how good is you computer. For a friendly\n        reminder, you have to compleat a 3 by 3 grid with your symbol (a cross\n        or a circle). The first player who aligns 3 of its symbols win the\n        match. By convention in this page, the first player will use crosses.\n      </p>\n\n      <PlayableIntro />\n\n      <h2>How your computer see the world</h2>\n\n      <p>\n        For our computer the world is limited to tic-tac-toe grids (this is a\n        bit restrictif). When you start a game, the computer see an empty grid.\n        He choos an action wich leads to a grid with a cross. Then, you choose\n        an action, this leads to an new state containing a cross and a circle,\n        then he plays, then he plays, you plays, etc....\n      </p>\n\n      <History />\n\n      <p>\n        That is near to how you percieve the game: A succession of different\n        grids. But the power of the computer, is that he can go in the past and\n        try other actions. For example below, the first player realised that he\n        did a mistaket when he chose its second action. That is just an example,\n        but if your patient, you can try evry possibility by cliking on the\n        grids.\n      </p>\n\n      <TreeIntro />\n\n      <p>\n        Look how beaoutiful it is. It looks like a tree, with its root on the\n        left and a ramification after eatch grid. Of course, for a human testing\n        all the possibilities seems long and boaring, but computers - almost -\n        never complain. If you're polite with them, they will try all the\n        possibilities for both players. The full knoleage of players give to the\n        computer the power to compute if a player can be sure to win or not.\n      </p>\n\n      <p>\n        PLaying corresponds to making a choice between multiple actions. Being a\n        cleaver player means to chose the action leading to victory. Since the\n        computer know if a stats is winning or not, he just have to try every\n        possible action and compute if it leads to a victorious grid or a\n        loosing one. More precisely, each action can lead to three\n        possibilities.\n      </p>\n      <ol>\n        <li>\n          <b>winning</b> : after playing this action the computer is sure to win\n        </li>\n        <li>\n          <b>null</b>: after playing this action the computer is sur to be able\n          to obtain a null\n        </li>\n        <li>\n          <b>loosing</b>: after playing this action, there is a way for the\n          oponent to win the game\n        </li>\n      </ol>\n      <p>\n        Of course the computer alway make the best choice for himself. He first\n        looks for a winning action, if it is impossible, he try to find a null\n        one. And finaly accept to play a loosing one if it is the only available\n        option.\n      </p>\n      <p>\n        You can now see how the computer estimate each action. Feel free to play\n        against yourself, and to choose to see solutions or not.\n      </p>\n\n      <ComputerView />\n\n      <h2>How to compute if a state is a winning one?</h2>\n      <p>\n        There is some simple cases. For example if 3 of your symbols are aligned\n        it's a winning grid, and if 3 symbols of your opponent are alligned it's\n        a loosing one. And of course if the grid is full and nobody win, it is a\n        null one. #CaptainObvious\n      </p>\n      <img\n        src={possibleEnds}\n        alt=\"exemples of final stituations at tic-tac-toe\"\n      />\n\n      <p>\n        Now, let assume that every body is a good player. Then if player can do\n        an action that leads to a winning grid (for him) he will choose this\n        action. If there is no such action he will choose the one leading to a\n        null grid. And if there is not such action, he will choose a loosing\n        one. (like our bot)\n      </p>\n      <p>\n        So if there is an action leading to a winning grids, the current one is\n        also a winning one (since the player will choose this action). If there\n        is no winning but a null one, it is also a null one. Otherwise it is a\n        loosing one. This is knon as a recurcive formula. Below the three cases\n        are represented.\n      </p>\n      <p>\n        In thoses cases X has to choose an action. In the first case, there is a\n        winning solution, so it is a winning grid. in the second case, there is\n        a loosing action and null actions, so it is a null grid. And the last\n        one is a loosing grid since all the actions lead to loosing grid.\n      </p>\n\n      <RecurenceExample />\n\n      <p>\n        The easieaset way to compute that, is to simply use rules proposed\n        above. We define the function \"getWinner\" which for a given grid returns\n        the winner. Of course if the state is a final one, it return the winner.\n        Otherwise, it plays every possible action and use getWinner on the new\n        state to know if actions are winning/null/loosing. Then, we use the\n        recurcive formula to know if the grid is winning/null/loosing.\n      </p>\n\n      <img src={algoPicture} alt=\"schem of the algorithm\" />\n\n      <p>\n        Wait a minute. To compute getWiner, we need to use getWinner ? That's\n        stupide ! Hum... not realy, this is called recurcive function. Each time\n        getWinner call another getWinner, the grid is different. More precisely,\n        the new state contains more symbols than the previous one. So they will\n        necesarly reach a terminal state. In other words, each time you call the\n        function you add a symbols, then after nine call you have 9 symbols, so\n        the game is over, and the funciton will necesarly return a value. Once\n        evry final value has been reach the previous getWinner can compute it's\n        result and give it to the previous one, etc ...\n      </p>\n      <p>\n        If you want to see it step by step how the computer analysis the tree of\n        possibilities, you can press the button \"next\".\n      </p>\n      <TreeSearch />\n\n      <h2>And the result is ...</h2>\n      <p>\n        The tic-tac-toe played by perfect player ends with a null (you alleready\n        know it if you tried to let the computer play against himself). To prove\n        it you can have a look at the tree bellow. It corresponds to all the\n        possible parties with a computer as first player.\n      </p>\n      <p>\n        When it is time to the first player to plat, we print only one action,\n        corresponding to the one computer will play. For player two, we try\n        every possible action to be sure that what ever he choose to play, the\n        computer can obtain what he expected.\n      </p>\n      <p>\n        Since there is a lot of possibilities, you can hide childs of a grid by\n        clicking on it.\n      </p>\n\n      <CompletTree robot={0} />\n\n      <p>\n        Why choosing Player one for the computer ? Because it is the smalest\n        tree.<Link to={\"/tic-tac-toe/second-player-tree/fr\"}>Here</Link> is the\n        tic-tac-toe tree of possibilities for computer as second player.\n      </p>\n     \n  </Layout>\n)\n\nexport default SecondPage\n"],"sourceRoot":""}