{"version":3,"sources":["webpack:///./src/pages/tic-tac-toe/index.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","src_components_layout__WEBPACK_IMPORTED_MODULE_2__","src_components_seo__WEBPACK_IMPORTED_MODULE_3__","src_components_tic_tac_toe_explenations_intro__WEBPACK_IMPORTED_MODULE_4__","src_components_tic_tac_toe_explenations_history__WEBPACK_IMPORTED_MODULE_5__","src_components_tic_tac_toe_explenations_introTree__WEBPACK_IMPORTED_MODULE_6__","src_components_tic_tac_toe_explenations_recurence__WEBPACK_IMPORTED_MODULE_7__","src_components_tic_tac_toe_explenations_computerView__WEBPACK_IMPORTED_MODULE_8__","src_components_tic_tac_toe_explenations_treeSearch__WEBPACK_IMPORTED_MODULE_9__","src_components_tic_tac_toe_explenations_completTree__WEBPACK_IMPORTED_MODULE_10__","_images_algo_svg__WEBPACK_IMPORTED_MODULE_11__","_images_algo_svg__WEBPACK_IMPORTED_MODULE_11___default","_images_ends_svg__WEBPACK_IMPORTED_MODULE_12__","_images_ends_svg__WEBPACK_IMPORTED_MODULE_12___default","SecondPage","a","createElement","location","title","role","aria-label","style","color","src","possibleEnds","alt","algoPicture","robot","to"],"mappings":"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","file":"component---src-pages-tic-tac-toe-index-js-c6a1cdef92dad33e76e5.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from \"src/components/layout\"\nimport SEO from \"src/components/seo\"\n\nimport PlayableIntro from \"src/components/tic-tac-toe/explenations/intro\"\nimport History from \"src/components/tic-tac-toe/explenations/history\"\nimport TreeIntro from \"src/components/tic-tac-toe/explenations/introTree\"\nimport RecurenceExample from \"src/components/tic-tac-toe/explenations/recurence\"\nimport ComputerView from \"src/components/tic-tac-toe/explenations/computerView\"\nimport TreeSearch from \"src/components/tic-tac-toe/explenations/treeSearch\"\nimport CompletTree from \"src/components/tic-tac-toe/explenations/completTree\"\n\n//images\nimport algoPicture from \"./images/algo.svg\"\nimport possibleEnds from \"./images/ends.svg\"\nconst SecondPage = () => (\n  <Layout location=\"/tic-tac-toe\">\n    <SEO title=\"Tic-tac-toe\" />\n\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n\n    <h1>Can you defeat an AI at tic-tac-toe?</h1>\n\n    <p>\n      Most of the exciting scientific articles in artificial inteligence are\n      about computer defeating human at famouse game. For this article lets just\n      consider the simple game of tic-tac-toe and solve it with technics comming\n      from the stone age of AI.\n    </p>\n    <p>\n      But let start by testing how good is you computer. For a friendly\n      reminder, you have to compleat a 3 by 3 grid with your symbol (a cross or\n      a circle). The first player who aligns 3 of its symbols win the match. By\n      convention in this page, the first player will use crosses.\n    </p>\n\n    <PlayableIntro />\n\n    <h2>How your computer see the world</h2>\n\n    <p>\n      For our computer the world is limited to tic-tac-toe grids (this is a bit\n      restrictif). When you start a game, the computer see an empty grid. He\n      choos an action wich leads to a grid with a cross. Then, you choose an\n      action, this leads to an new state containing a cross and a circle, then\n      he plays, then he plays, you plays, etc....\n    </p>\n\n    <History />\n\n    <p>\n      That is near to how you percieve the game: A succession of different\n      grids. But the power of the computer, is that he can go in the past and\n      try other actions. For example below, the first player realised that he\n      did a mistaket when he chose its second action. That is just an example,\n      but if your patient, you can try evry possibility by cliking on the grids.\n    </p>\n\n    <TreeIntro />\n\n    <p>\n      Look how beautiful it is. It looks like a tree, with its root on the left\n      and a ramification after eatch grid. Of course, for a human testing all\n      the possibilities seems long and boaring. But computers - almost - never\n      complain. If you're polite with them, they will try all the possibilities\n      for both players. The full knoleage of players give to the computer the\n      power to compute if a player can be sure to win or not and to become the\n      master of tic-tac-toe!{\" \"}\n      <span role=\"img\" aria-label=\"evil\">\n        ðŸ‘¹\n      </span>\n    </p>\n\n    <p>\n      More precisely, the computer can classify each tic-tac-toe board as\n      follow.\n    </p>\n    <ol>\n      <li>\n        <b>\n          <span style={{ color: \"blue\" }}>X</span> win\n        </b>{\" \"}\n        : Player <span style={{ color: \"blue\" }}>X</span> has a strategy to win\n        whatever whatever player <span style={{ color: \"red\" }}>O</span> do.\n      </li>\n      <li>\n        <b>\n          <span style={{ color: \"red\" }}>O</span> win\n        </b>\n        : Player <span style={{ color: \"red\" }}>O</span> has a strategy to win\n        whatever whatever player <span style={{ color: \"blue\" }}>X</span> do.\n      </li>\n      <li>\n        <b>\n          <span style={{ color: \"orange\" }}>null</span>\n        </b>\n        : None of the player has a strategy to be sure to win.\n      </li>\n    </ol>\n    <p>\n      Of course the computer alway make the best choice for himself. He will try\n      all the possible actions and compute to which catgory they belong. If an\n      action leads to a board classified as a winning one for him - Yes,\n      computer whant to win{\" \"}\n      <span role=\"img\" aria-label=\"angel\">\n        ðŸ‘¼\n      </span>\n      . If there is no winnig action, he will chose an action leading to a{\" \"}\n      <span style={{ color: \"orange\" }}>null</span> board - life is hard you can\n      not always win\n      <span role=\"img\" aria-label=\"disapointed\">\n        ðŸ˜’\n      </span>\n      . And if there are neither winning nore null action, it means that the\n      computer is forced to play an action leading to a winning board... for the\n      adversary{\" \"}\n      <span role=\"img\" aria-label=\"crying\">\n        ðŸ˜­\n      </span>\n      .\n    </p>\n    <p>\n      Now you can play again against the computer. You can choose to see if\n      actions are winning for <span style={{ color: \"blue\" }}>X</span>,{\" \"}\n      <span style={{ color: \"red\" }}>O</span> or are{\" \"}\n      <span style={{ color: \"orange\" }}>null</span>. You can either play against\n      yourself if loosing bother you{\" \"}\n      <span role=\"img\" aria-label=\"smile\">\n        ðŸ˜‰\n      </span>\n    </p>\n\n    <ComputerView />\n\n    <h2>How to compute if a state is a winning one?</h2>\n    <p>\n      There is some simple cases. For example if 3{\" \"}\n      <span style={{ color: \"blue\" }}>X</span> - or 3{\" \"}\n      <span style={{ color: \"red\" }}>O</span> - are aligned, it' a winning board\n      for <span style={{ color: \"blue\" }}>X</span> - or{\" \"}\n      <span style={{ color: \"red\" }}>O</span>. If the board is full and nobody\n      win, it's a <span style={{ color: \"orange\" }}>null</span>. Thank you\n      Captain obvious! 3 of your symbols are aligned it's a winning grid, and if\n      3 symbols of your opponent are alligned it's a loosing one. And of course\n      if the grid is full and nobody win, it is a null one. #CaptainObvious\n    </p>\n    <img\n      src={possibleEnds}\n      alt=\"exemples of final stituations at tic-tac-toe\"\n    />\n\n    <p>\n      Now, let assume that every body is a good player. Then if player can do an\n      action that leads to a winning grid (for him) he will choose this action.\n      If there is no such action he will choose the one leading to a null grid.\n      And if there is not such action, he will choose a loosing one. (like our\n      bot)\n    </p>\n    <p>\n      So if there is an action leading to a winning grids, the current one is\n      also a winning one (since the player will choose this action). If there is\n      no winning but a null one, it is also a null one. Otherwise it is a\n      loosing one. This is knon as a recurcive formula. Below the three cases\n      are represented.\n    </p>\n    <p>\n      It will be easier with an example. In the 3 examples bellow, it is to{\" \"}\n      <span style={{ color: \"blue\" }}>X</span> to play. In first cas, there is\n      an action leading to a winning grid for{\" \"}\n      <span style={{ color: \"blue\" }}>X</span>. In the second one, there are\n      somme <span style={{ color: \"orange\" }}>null</span> actions some wining\n      ones for <span style={{ color: \"red\" }}>O</span>. Then it's a{\" \"}\n      <span style={{ color: \"orange\" }}>null</span> grid. In the laste\n      configuration, all the possibles actions lead to board winning for{\" \"}\n      <span style={{ color: \"red\" }}>O</span>. So it's a{\" \"}\n      <span style={{ color: \"red\" }}>O</span> board.\n    </p>\n\n    <RecurenceExample />\n\n    <p>\n      The easieaset way to compute who will win is to use rules proposed above.\n      We define the function \"getWinner\" which for a given grid returns the\n      winner. If the state is a final one, it return the winner (easy case).\n      Otherwise, the function plays every possible action and use getWinner on\n      the new state to know if actions are leading to{\" \"}\n      <span style={{ color: \"blue\" }}>X</span>,{\" \"}\n      <span style={{ color: \"red\" }}>O</span> or{\" \"}\n      <span style={{ color: \"orange\" }}>null</span>. From those results and with\n      our previous relation we can compute who will win.\n    </p>\n\n    <img src={algoPicture} alt=\"schem of the algorithm\" />\n\n    <p>\n      Wait a minute. To compute \"getWiner\", we need to use \"getWinner\" ? That's\n      stupide ! Hum... not realy, this is called recurcive function. Each time\n      \"getWinner\" call another \"getWinner\", the grid is different. More\n      precisely, the new state contains more symbols than the previous one. So\n      they will necesarly reach a terminal state. In other words, each time you\n      call the function you add a symbols, then after nine call you have 9\n      symbols, so the game is over, and the funciton will necesarly return a\n      value. Once evry final value has been reach the previous \"getWinner\" can\n      compute its result and give it to the previous one, etc ...\n    </p>\n    <p>\n      If you want to see step by step how the computer analysis the tree of\n      possibilities, you can press the button \"next\".\n    </p>\n    <TreeSearch />\n\n    <h2>And the result is ...</h2>\n    <p>\n      The tic-tac-toe played by perfect player ends with a{\" \"}\n      <span style={{ color: \"orange\" }}>null</span> (you alleready know it if\n      you tried to let the computer play against himself). To prove it you can\n      have a look at the tree bellow. It corresponds to all the possible parties\n      with a computer as first player.\n    </p>\n    <p>\n      When it is time to the first player to play, we print only one action,\n      corresponding to the one computer will play. For player two, we try every\n      possible action to be sure that what ever he choose to play, the computer\n      can obtain what he expected.\n    </p>\n    <p>\n      Since there is a lot of possibilities, you can hide childs of a grid by\n      clicking on it.\n    </p>\n\n    <CompletTree robot={0} />\n\n    <p>\n      Why choosing Player one for the computer ? Because it is the smalest tree.\n      <Link to={\"/tic-tac-toe/second-player-tree/fr\"}>Here</Link> is the\n      tic-tac-toe tree of possibilities for computer as second player.\n    </p>\n  </Layout>\n)\n\nexport default SecondPage\n"],"sourceRoot":""}